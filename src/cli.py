"""
Interface en ligne de commande pour le g√©n√©rateur de bilans psychomoteurs
"""

import asyncio
import json
import sys
from pathlib import Path
from typing import List, Optional

import typer
from rich.console import Console
from rich.panel import Panel
from rich.progress import track
from rich.table import Table

from config.settings import Config, default_config
from src.core.generator import PsychomotBilanGenerator
from src.utils.logging import setup_logging

app = typer.Typer(
    name="pbg",
    help="üß† G√©n√©rateur de Bilans Psychomoteurs avec IA",
    add_completion=False,
    rich_markup_mode="rich",
)

console = Console()


@app.command()
def generate(
    notes_file: Path = typer.Argument(
        ...,
        help="Fichier JSON contenant les notes du bilan",
        exists=True,
        file_okay=True,
        readable=True,
    ),
    output: Optional[Path] = typer.Option(
        None, "--output", "-o", help="Fichier de sortie (optionnel)"
    ),
    model: str = typer.Option(
        default_config.default_model,
        "--model",
        "-m",
        help="Mod√®le √† utiliser pour la g√©n√©ration",
    ),
    temperature: float = typer.Option(
        0.3,
        "--temperature",
        "-t",
        min=0.1,
        max=1.0,
        help="Cr√©ativit√© du mod√®le (0.1-1.0)",
    ),
    quality: bool = typer.Option(
        True, "--quality/--no-quality", help="Activer le contr√¥le qualit√© avanc√©"
    ),
    async_mode: bool = typer.Option(
        False, "--async", help="Mode g√©n√©ration asynchrone"
    ),
    retries: int = typer.Option(
        2, "--retries", "-r", min=0, max=5, help="Nombre de tentatives en cas d'√©chec"
    ),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="Mode d√©taill√©"),
):
    """
    üöÄ G√©n√®re un bilan psychomoteur complet √† partir de notes

    Exemple d'usage:
    pbg generate notes.json --model mistral --output mon_bilan.docx
    """

    if verbose:
        setup_logging("DEBUG")
    else:
        setup_logging("INFO")

    console.print(
        Panel.fit(
            f"üß† [bold blue]G√©n√©rateur de Bilans Psychomoteurs[/bold blue]\n"
            f"üìÅ Notes: {notes_file}\n"
            f"ü§ñ Mod√®le: {model}\n"
            f"üå°Ô∏è Temp√©rature: {temperature}\n"
            f"‚ö° Mode: {'Asynchrone' if async_mode else 'Synchrone'}\n"
            f"üîç Qualit√©: {'Activ√©e' if quality else 'D√©sactiv√©e'}",
            title="Configuration",
        )
    )

    async def run_generation():
        try:
            # Initialisation du g√©n√©rateur
            generator = PsychomotBilanGenerator(
                model_name=model, enable_quality_checks=quality, enable_async=async_mode
            )

            await generator.initialize()

            # G√©n√©ration du bilan
            output_path = await generator.generate_full_bilan(
                notes_file=notes_file,
                output_file=output,
                temperature=temperature,
                max_retries=retries,
            )

            console.print(f"\n‚úÖ [bold green]Bilan g√©n√©r√© avec succ√®s![/bold green]")
            console.print(f"üìÑ Fichier: {output_path}")

            return str(output_path)

        except Exception as e:
            console.print(
                f"\n‚ùå [bold red]Erreur lors de la g√©n√©ration:[/bold red] {e}"
            )
            raise typer.Exit(1)

    # Ex√©cution
    try:
        result = asyncio.run(run_generation())
        console.print(f"\nüéâ [bold]G√©n√©ration termin√©e: {result}[/bold]")
    except KeyboardInterrupt:
        console.print("\n‚ö†Ô∏è G√©n√©ration interrompue par l'utilisateur")
        raise typer.Exit(1)


@app.command()
def models():
    """
    üìã Liste les mod√®les disponibles
    """
    config = default_config

    table = Table(title="ü§ñ Mod√®les Disponibles")
    table.add_column("Nom", style="cyan", no_wrap=True)
    table.add_column("Type", style="magenta")
    table.add_column("Chemin/HF", style="green")
    table.add_column("Statut", style="yellow")
    table.add_column("Config", style="blue")

    for name, model_config in config.models.items():
        # V√©rification disponibilit√© locale
        if model_config.local_path and model_config.local_path.exists():
            status = "‚úÖ Local"
            path_info = str(model_config.local_path.name)
        else:
            status = "üì• HuggingFace"
            path_info = model_config.hf_name or "N/A"

        # Informations de configuration
        config_info = f"T:{model_config.temperature} | {model_config.quantization}"

        # Type de mod√®le
        if "bio" in name.lower():
            model_type = "üè• M√©dical"
        elif "mistral" in name.lower():
            model_type = "üî• G√©n√©raliste"
        elif "qwen" in name.lower():
            model_type = "üöÄ Performant"
        else:
            model_type = "üìù Standard"

        table.add_row(name, model_type, path_info, status, config_info)

    console.print(table)

    # Informations additionnelles
    available_local = config.list_available_models()
    console.print(f"\nüìä R√©sum√©:")
    console.print(f"  ‚Ä¢ Mod√®les configur√©s: {len(config.models)}")
    console.print(f"  ‚Ä¢ Disponibles localement: {len(available_local)}")
    console.print(f"  ‚Ä¢ Mod√®le par d√©faut: [bold]{config.default_model}[/bold]")


@app.command()
def validate(
    notes_file: Path = typer.Argument(
        ...,
        help="Fichier JSON des notes √† valider",
        exists=True,
        file_okay=True,
        readable=True,
    ),
):
    """
    ‚úÖ Valide la structure et le contenu d'un fichier de notes
    """
    try:
        with open(notes_file, "r", encoding="utf-8") as f:
            notes_data = json.load(f)

        console.print(f"üìã Validation de: {notes_file}")

        # Validation structure de base
        required_keys = ["titre", "sections"]
        missing_keys = [key for key in required_keys if key not in notes_data]

        if missing_keys:
            console.print(f"‚ùå Cl√©s manquantes: {', '.join(missing_keys)}")
            raise typer.Exit(1)

        # Validation des sections
        sections = notes_data.get("sections", {})
        expected_sections = default_config.section_order

        table = Table(title="üìù Sections du Bilan")
        table.add_column("Section", style="cyan")
        table.add_column("Statut", style="green")
        table.add_column("Contenu", style="yellow")

        for section in expected_sections:
            if section in sections:
                content = sections[section]
                if isinstance(content, dict):
                    content_info = f"{len(content)} sous-sections"
                elif isinstance(content, list):
                    content_info = f"{len(content)} √©l√©ments"
                else:
                    content_info = f"{len(str(content))} caract√®res"

                table.add_row(section, "‚úÖ Pr√©sente", content_info)
            else:
                table.add_row(section, "‚ùå Manquante", "N/A")

        console.print(table)

        # Statistiques g√©n√©rales
        total_sections = len([s for s in expected_sections if s in sections])
        completion_rate = (total_sections / len(expected_sections)) * 100

        console.print(f"\nüìä Statistiques:")
        console.print(f"  ‚Ä¢ Titre: {notes_data.get('titre', 'Non d√©fini')}")
        console.print(
            f"  ‚Ä¢ Sections compl√®tes: {total_sections}/{len(expected_sections)}"
        )
        console.print(f"  ‚Ä¢ Taux de completion: {completion_rate:.1f}%")

        if completion_rate < 50:
            console.print(
                "‚ö†Ô∏è [yellow]Attention: Beaucoup de sections manquantes[/yellow]"
            )
        elif completion_rate < 80:
            console.print("‚úÖ [green]Fichier valide mais incomplet[/green]")
        else:
            console.print("üéâ [bold green]Fichier tr√®s complet![/bold green]")

    except json.JSONDecodeError as e:
        console.print(f"‚ùå Erreur JSON: {e}")
        raise typer.Exit(1)
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        raise typer.Exit(1)


@app.command()
def config(
    show: bool = typer.Option(
        False, "--show", help="Afficher la configuration actuelle"
    ),
    export: Optional[Path] = typer.Option(
        None, "--export", help="Exporter la config vers un fichier"
    ),
    validate_config: bool = typer.Option(
        False, "--validate", help="Valider la configuration"
    ),
):
    """
    ‚öôÔ∏è Gestion de la configuration
    """
    if show:
        console.print(Panel.fit(str(default_config), title="Configuration Actuelle"))

    if validate_config:
        issues = default_config.validate_configuration()
        if issues:
            console.print("‚ùå [bold red]Probl√®mes de configuration:[/bold red]")
            for issue in issues:
                console.print(f"  ‚Ä¢ {issue}")
        else:
            console.print("‚úÖ [bold green]Configuration valide[/bold green]")

    if export:
        try:
            default_config.export_config(export)
            console.print(f"‚úÖ Configuration export√©e vers: {export}")
        except Exception as e:
            console.print(f"‚ùå Erreur d'export: {e}")


@app.command()
def benchmark(
    notes_file: Path = typer.Argument(
        ..., help="Fichier de notes pour le benchmark", exists=True
    ),
    models: Optional[List[str]] = typer.Option(
        None, "--models", help="Mod√®les √† tester"
    ),
    iterations: int = typer.Option(
        3, "--iterations", min=1, max=10, help="Nombre d'it√©rations"
    ),
    output_dir: Optional[Path] = typer.Option(
        None, "--output-dir", help="Dossier de sortie"
    ),
):
    """
    üìä Benchmark des mod√®les disponibles
    """
    console.print("üèÅ [bold]D√©marrage du benchmark...[/bold]")

    # Mod√®les √† tester
    if models is None:
        models = default_config.list_available_models()
        if not models:
            console.print("‚ùå Aucun mod√®le local disponible pour le benchmark")
            raise typer.Exit(1)

    console.print(f"ü§ñ Mod√®les √† tester: {', '.join(models)}")
    console.print(f"üîÑ It√©rations par mod√®le: {iterations}")

    results = {}

    async def run_benchmark():
        for model in models:
            console.print(f"\nüß™ Test du mod√®le: [bold]{model}[/bold]")

            model_results = {
                "times": [],
                "word_counts": [],
                "quality_scores": [],
                "errors": 0,
            }

            for i in track(range(iterations), description=f"Test {model}"):
                try:
                    generator = PsychomotBilanGenerator(
                        model_name=model, enable_quality_checks=True
                    )

                    await generator.initialize()

                    start_time = asyncio.get_event_loop().time()
                    output_path = await generator.generate_full_bilan(
                        notes_file=notes_file,
                        output_file=output_dir / f"benchmark_{model}_{i}.docx"
                        if output_dir
                        else None,
                    )
                    end_time = asyncio.get_event_loop().time()

                    # Collecte des m√©triques
                    generation_time = end_time - start_time
                    word_count = generator.stats.total_words
                    quality_score = generator.stats.quality_score

                    model_results["times"].append(generation_time)
                    model_results["word_counts"].append(word_count)
                    model_results["quality_scores"].append(quality_score)

                except Exception as e:
                    console.print(f"‚ùå Erreur it√©ration {i}: {e}")
                    model_results["errors"] += 1

            results[model] = model_results

    # Ex√©cution du benchmark
    asyncio.run(run_benchmark())

    # Affichage des r√©sultats
    table = Table(title="üìä R√©sultats du Benchmark")
    table.add_column("Mod√®le", style="cyan")
    table.add_column("Temps Moyen", style="green")
    table.add_column("Mots/s", style="yellow")
    table.add_column("Qualit√©", style="blue")
    table.add_column("Erreurs", style="red")

    for model, data in results.items():
        if data["times"]:
            avg_time = sum(data["times"]) / len(data["times"])
            avg_words = sum(data["word_counts"]) / len(data["word_counts"])
            words_per_sec = avg_words / avg_time if avg_time > 0 else 0
            avg_quality = sum(data["quality_scores"]) / len(data["quality_scores"])

            table.add_row(
                model,
                f"{avg_time:.1f}s",
                f"{words_per_sec:.1f}",
                f"{avg_quality:.1%}",
                str(data["errors"]),
            )

    console.print(table)


@app.command()
def setup():
    """
    üîß Assistant de configuration initiale
    """
    console.print(
        Panel.fit(
            "üîß [bold blue]Assistant de Configuration[/bold blue]\n"
            "Cet assistant va vous aider √† configurer le g√©n√©rateur",
            title="Setup",
        )
    )

    # V√©rification des d√©pendances
    console.print("\nüì¶ V√©rification des d√©pendances...")

    missing_deps = []
    try:
        import torch

        if torch.cuda.is_available():
            console.print("  ‚úÖ PyTorch avec CUDA")
        else:
            console.print("  ‚ö†Ô∏è PyTorch sans CUDA (CPU seulement)")
    except ImportError:
        missing_deps.append("torch")

    try:
        import transformers

        console.print("  ‚úÖ Transformers")
    except ImportError:
        missing_deps.append("transformers")

    try:
        import spacy

        console.print("  ‚úÖ spaCy")
    except ImportError:
        console.print("  ‚ö†Ô∏è spaCy non install√© (fonctionnalit√©s limit√©es)")

    if missing_deps:
        console.print(f"\n‚ùå D√©pendances manquantes: {', '.join(missing_deps)}")
        console.print("Installez-les avec: pip install -r requirements.txt")
        raise typer.Exit(1)

    # V√©rification de la configuration
    issues = default_config.validate_configuration()
    if issues:
        console.print("\n‚ö†Ô∏è Probl√®mes de configuration:")
        for issue in issues:
            console.print(f"  ‚Ä¢ {issue}")
    else:
        console.print("\n‚úÖ Configuration valide")

    # Suggestion de t√©l√©chargement de mod√®les
    available_models = default_config.list_available_models()
    if not available_models:
        console.print("\nüì• Aucun mod√®le local d√©tect√©")
        console.print("Utilisez 'pbg download-model <nom>' pour t√©l√©charger un mod√®le")
    else:
        console.print(f"\n‚úÖ Mod√®les disponibles: {', '.join(available_models)}")

    console.print("\nüéâ Configuration termin√©e!")


@app.command()
def create_example():
    """
    üìù Cr√©e un fichier d'exemple de notes
    """
    example_notes = {
        "titre": "Bilan Psychomoteur - Exemple",
        "sections": {
            "Identit√© & contexte": {
                "nom": "Marie D.",
                "age": "8 ans",
                "classe": "CE2",
                "contexte": "Demande de l'enseignante pour difficult√©s scolaires",
            },
            "Motif de la demande": "Difficult√©s en √©criture et agitation en classe",
            "Anamn√®se synth√©tique": {
                "grossesse": "Sans particularit√©",
                "d√©veloppement": "Marche √† 14 mois, langage normal",
                "ant√©c√©dents": "Aucun ant√©c√©dent m√©dical",
            },
            "√âvaluation psychomotrice": {
                "Tonus & posture": "Hypotonie axiale l√©g√®re observ√©e",
                "Motricit√© globale": "Coordination satisfaisante",
                "Motricit√© fine / praxies": "Difficult√©s de pr√©hension et de pr√©cision",
                "Graphisme / √©criture": "√âcriture laborieuse, lettres mal form√©es",
            },
            "Tests / outils utilis√©s": [
                "M-ABC-2",
                "BHK (√©chelle d'√©valuation de l'√©criture)",
                "Observation clinique libre",
            ],
            "Analyse & synth√®se": "Profil compatible avec un trouble de la coordination",
            "Conclusion & recommandations": "R√©√©ducation psychomotrice recommand√©e",
            "Projet th√©rapeutique": "S√©ances hebdomadaires, travail graphomoteur",
            "Modalit√©s & consentement": "Accord parental obtenu",
        },
    }

    output_file = Path("exemple_notes.json")
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(example_notes, f, indent=2, ensure_ascii=False)

    console.print(f"‚úÖ Fichier d'exemple cr√©√©: {output_file}")
    console.print("Utilisez: pbg generate exemple_notes.json")


def main():
    """Point d'entr√©e principal"""
    try:
        app()
    except KeyboardInterrupt:
        console.print("\nüëã Au revoir!")
        sys.exit(0)
    except Exception as e:
        console.print(f"\nüí• Erreur inattendue: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
