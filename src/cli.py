"""
Interface en ligne de commande pour le g√©n√©rateur de bilans psychomoteurs
"""

import asyncio
import json
import sys
from pathlib import Path
from typing import List, Optional

import typer
from rich.console import Console
from rich.panel import Panel
from rich.progress import track
from rich.table import Table

from config.settings import settings
from src.core.generator import PsychomotBilanGenerator
from src.utils.logging import setup_logging

app = typer.Typer(
    name="pbg", help="G√©n√©rateur de Bilans Psychomoteurs avec IA", add_completion=False
)

console = Console()


@app.command()
def generate(
    notes_file: str = typer.Argument(help="Fichier JSON contenant les notes du bilan"),
    output: Optional[str] = typer.Option(
        None, "--output", "-o", help="Fichier de sortie (optionnel)"
    ),
    model: str = typer.Option(
        settings.default_model, "--model", "-m", help="Mod√®le √† utiliser"
    ),
    temperature: float = typer.Option(
        0.3, "--temperature", "-t", help="Cr√©ativit√© du mod√®le (0.1-1.0)"
    ),
    quality: bool = typer.Option(
        True, "--quality/--no-quality", help="Contr√¥le qualit√© avanc√©"
    ),
    async_mode: bool = typer.Option(
        False, "--async", help="Mode g√©n√©ration asynchrone"
    ),
    retries: int = typer.Option(
        2, "--retries", "-r", help="Nombre de tentatives en cas d'√©chec"
    ),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="Mode d√©taill√©"),
):
    """
    G√©n√®re un bilan psychomoteur complet √† partir de notes

    Exemple: pbg generate notes.json --model mistral --output mon_bilan.docx
    """

    notes_path = Path(notes_file)
    if not notes_path.exists():
        console.print(f"‚ùå Fichier non trouv√©: {notes_file}")
        raise typer.Exit(1)

    if verbose:
        setup_logging("DEBUG")
    else:
        setup_logging("INFO")

    console.print(
        Panel.fit(
            f"G√©n√©rateur de Bilans Psychomoteurs\n"
            f"Notes: {notes_file}\n"
            f"Mod√®le: {model}\n"
            f"Temp√©rature: {temperature}\n"
            f"Mode: {'Asynchrone' if async_mode else 'Synchrone'}\n"
            f"Qualit√©: {'Activ√©e' if quality else 'D√©sactiv√©e'}",
            title="Configuration",
        )
    )

    # Test simple des notes en premier
    console.print("üîç Validation du fichier de notes...")
    try:
        with open(notes_path, "r", encoding="utf-8") as f:
            notes_data = json.load(f)
        console.print("‚úÖ Fichier JSON valide")
    except Exception as e:
        console.print(f"‚ùå Erreur fichier notes: {e}")
        raise typer.Exit(1)

    async def run_generation():
        """Fonction asynchrone principale pour la g√©n√©ration"""
        generator = None
        try:
            # Initialisation du g√©n√©rateur
            console.print("üîß Initialisation du g√©n√©rateur...")
            generator = PsychomotBilanGenerator(
                model_name=model, enable_quality_checks=quality, enable_async=async_mode
            )

            console.print("‚ö° Initialisation en cours...")
            await generator.initialize()
            console.print("‚úÖ G√©n√©rateur initialis√©")

            # V√©rification des notes avant g√©n√©ration
            console.print("üìñ V√©rification des notes...")

            if "sections" not in notes_data:
                console.print("‚ùå Erreur: Aucune section trouv√©e dans les notes")
                raise typer.Exit(1)

            sections_count = len(notes_data["sections"])
            console.print(f"üìã {sections_count} sections trouv√©es dans les notes")

            for section_name in notes_data["sections"]:
                console.print(f"  ‚Ä¢ {section_name}")

            # G√©n√©ration du bilan
            console.print("üöÄ D√©but de la g√©n√©ration...")
            output_path = await generator.generate_full_bilan(
                notes_file=notes_path,
                output_file=Path(output) if output else None,
                temperature=temperature,
                max_retries=retries,
            )

            console.print(f"\n‚úÖ Bilan g√©n√©r√© avec succ√®s!")
            console.print(f"üìÑ Fichier: {output_path}")

            # V√©rification que le fichier existe
            if Path(output_path).exists():
                size = Path(output_path).stat().st_size
                console.print(f"üìä Taille du fichier: {size} octets")
            else:
                console.print("‚ö†Ô∏è Attention: Le fichier n'a pas √©t√© cr√©√©")

            return str(output_path)

        except Exception as e:
            console.print(f"\n‚ùå Erreur lors de la g√©n√©ration: {e}")

            # Affichage de la stack trace en mode verbose
            if verbose:
                import traceback

                console.print("\nüîç D√©tails de l'erreur:")
                console.print(traceback.format_exc())

            raise typer.Exit(1)

        finally:
            # Nettoyage appropri√©
            if generator:
                try:
                    console.print("üßπ Nettoyage des ressources...")
                    await generator.cleanup()
                    console.print("‚úÖ Nettoyage termin√©")
                except Exception as cleanup_error:
                    console.print(f"‚ö†Ô∏è Erreur lors du nettoyage: {cleanup_error}")

    try:
        result = asyncio.run(run_generation())
        console.print(f"\nüéâ G√©n√©ration termin√©e: {result}")
    except KeyboardInterrupt:
        console.print("\n‚ö†Ô∏è G√©n√©ration interrompue par l'utilisateur")
        raise typer.Exit(1)
    except Exception as e:
        console.print(f"\nüí• Erreur inattendue: {e}")
        if verbose:
            import traceback

            console.print(traceback.format_exc())
        raise typer.Exit(1)


@app.command()
def models():
    """
    Liste les mod√®les disponibles
    """
    config = settings

    table = Table(title="Mod√®les Disponibles")
    table.add_column("Nom", style="cyan", no_wrap=True)
    table.add_column("Type", style="magenta")
    table.add_column("Chemin/HF", style="green")
    table.add_column("Statut", style="yellow")
    table.add_column("Config", style="blue")

    for name, model_config in config.models.items():
        # V√©rification disponibilit√© locale
        if model_config.local_path and model_config.local_path.exists():
            status = "‚úÖ Local"
            path_info = str(model_config.local_path.name)
        else:
            status = "üì• HuggingFace"
            path_info = model_config.hf_name or "N/A"

        # Informations de configuration
        config_info = f"T:{model_config.temperature} | {model_config.quantization}"

        # Type de mod√®le
        if "bio" in name.lower():
            model_type = "üè• M√©dical"
        elif "mistral" in name.lower():
            model_type = "üî• G√©n√©raliste"
        elif "qwen" in name.lower():
            model_type = "üöÄ Performant"
        else:
            model_type = "üìù Standard"

        table.add_row(name, model_type, path_info, status, config_info)

    console.print(table)

    # Informations additionnelles
    available_local = config.list_available_models()
    console.print(f"\nüìä R√©sum√©:")
    console.print(f"  ‚Ä¢ Mod√®les configur√©s: {len(config.models)}")
    console.print(f"  ‚Ä¢ Disponibles localement: {len(available_local)}")
    console.print(f"  ‚Ä¢ Mod√®le par d√©faut: {config.default_model}")


@app.command()
def validate(notes_file: str = typer.Argument(help="Fichier JSON des notes √† valider")):
    """
    Valide la structure et le contenu d'un fichier de notes
    """
    notes_path = Path(notes_file)
    if not notes_path.exists():
        console.print(f"‚ùå Fichier non trouv√©: {notes_file}")
        raise typer.Exit(1)

    try:
        with open(notes_path, "r", encoding="utf-8") as f:
            notes_data = json.load(f)

        console.print(f"üìã Validation de: {notes_file}")

        # Validation structure de base
        required_keys = ["titre", "sections"]
        missing_keys = [key for key in required_keys if key not in notes_data]

        if missing_keys:
            console.print(f"‚ùå Cl√©s manquantes: {', '.join(missing_keys)}")
            raise typer.Exit(1)

        # Validation des sections
        sections = notes_data.get("sections", {})
        expected_sections = settings.section_order

        table = Table(title="üîç Sections du Bilan")
        table.add_column("Section", style="cyan")
        table.add_column("Statut", style="green")
        table.add_column("Contenu", style="yellow")

        for section in expected_sections:
            if section in sections:
                content = sections[section]
                if isinstance(content, dict):
                    content_info = f"{len(content)} sous-sections"
                elif isinstance(content, list):
                    content_info = f"{len(content)} √©l√©ments"
                else:
                    content_info = f"{len(str(content))} caract√®res"

                table.add_row(section, "‚úÖ Pr√©sente", content_info)
            else:
                table.add_row(section, "‚ùå Manquante", "N/A")

        console.print(table)

        # Statistiques g√©n√©rales
        total_sections = len([s for s in expected_sections if s in sections])
        completion_rate = (total_sections / len(expected_sections)) * 100

        console.print(f"\nüìä Statistiques:")
        console.print(f"  ‚Ä¢ Titre: {notes_data.get('titre', 'Non d√©fini')}")
        console.print(
            f"  ‚Ä¢ Sections compl√®tes: {total_sections}/{len(expected_sections)}"
        )
        console.print(f"  ‚Ä¢ Taux de completion: {completion_rate:.1f}%")

        if completion_rate < 50:
            console.print("‚ö†Ô∏è Attention: Beaucoup de sections manquantes")
        elif completion_rate < 80:
            console.print("‚úÖ Fichier valide mais incomplet")
        else:
            console.print("üéâ Fichier tr√®s complet!")

    except json.JSONDecodeError as e:
        console.print(f"‚ùå Erreur JSON: {e}")
        raise typer.Exit(1)
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        raise typer.Exit(1)


@app.command()
def config(
    show: bool = typer.Option(False, "--show", help="Afficher la configuration"),
    export: Optional[str] = typer.Option(
        None, "--export", help="Exporter vers un fichier"
    ),
    validate_config: bool = typer.Option(
        False, "--validate", help="Valider la configuration"
    ),
):
    """
    Gestion de la configuration
    """
    if show:
        console.print(Panel.fit(str(settings), title="Configuration Actuelle"))

    if validate_config:
        issues = settings.validate_configuration()
        if issues:
            console.print("‚ùå Probl√®mes de configuration:")
            for issue in issues:
                console.print(f"  ‚Ä¢ {issue}")
        else:
            console.print("‚úÖ Configuration valide")

    if export:
        try:
            settings.export_config(Path(export))
            console.print(f"‚úÖ Configuration export√©e vers: {export}")
        except Exception as e:
            console.print(f"‚ùå Erreur d'export: {e}")


@app.command()
def setup():
    """
    Assistant de configuration initiale
    """
    console.print(
        Panel.fit(
            "Assistant de Configuration\n"
            "Cet assistant va vous aider √† configurer le g√©n√©rateur",
            title="Setup",
        )
    )

    # V√©rification des d√©pendances
    console.print("\nüì¶ V√©rification des d√©pendances...")

    missing_deps = []
    try:
        import torch

        if torch.cuda.is_available():
            console.print("  ‚úÖ PyTorch avec CUDA")
        else:
            console.print("  ‚ö†Ô∏è PyTorch sans CUDA (CPU seulement)")
    except ImportError:
        missing_deps.append("torch")

    try:
        import transformers

        console.print("  ‚úÖ Transformers")
    except ImportError:
        missing_deps.append("transformers")

    try:
        import spacy

        console.print("  ‚úÖ spaCy")
    except ImportError:
        console.print("  ‚ö†Ô∏è spaCy non install√© (fonctionnalit√©s limit√©es)")

    if missing_deps:
        console.print(f"\n‚ùå D√©pendances manquantes: {', '.join(missing_deps)}")
        console.print("Installez-les avec: pip install -r requirements.txt")
        raise typer.Exit(1)

    # V√©rification de la configuration
    issues = settings.validate_configuration()
    if issues:
        console.print("\n‚ö†Ô∏è Probl√®mes de configuration:")
        for issue in issues:
            console.print(f"  ‚Ä¢ {issue}")
    else:
        console.print("\n‚úÖ Configuration valide")

    # Suggestion de t√©l√©chargement de mod√®les
    available_models = settings.list_available_models()
    if not available_models:
        console.print("\nüî• Aucun mod√®le local d√©tect√©")
        console.print(
            "T√©l√©chargez un mod√®le avec: python scripts/download_models.py mistral"
        )
    else:
        console.print(f"\n‚úÖ Mod√®les disponibles: {', '.join(available_models)}")

    console.print("\nüéâ Configuration termin√©e!")


@app.command()
def create_example():
    """
    Cr√©e un fichier d'exemple de notes
    """
    example_notes = {
        "titre": "Bilan Psychomoteur - Exemple",
        "sections": {
            "Identit√© & contexte": {
                "nom": "Marie D.",
                "age": "8 ans",
                "classe": "CE2",
                "contexte": "Demande de l'enseignante pour difficult√©s scolaires",
            },
            "Motif de la demande": "Difficult√©s en √©criture et agitation en classe",
            "Anamn√®se synth√©tique": {
                "grossesse": "Sans particularit√©",
                "d√©veloppement": "Marche √† 14 mois, langage normal",
                "ant√©c√©dents": "Aucun ant√©c√©dent m√©dical",
            },
            "√âvaluation psychomotrice": {
                "Tonus & posture": "Hypotonie axiale l√©g√®re observ√©e",
                "Motricit√© globale": "Coordination satisfaisante",
                "Motricit√© fine / praxies": "Difficult√©s de pr√©hension et de pr√©cision",
                "Graphisme / √©criture": "√âcriture laborieuse, lettres mal form√©es",
            },
            "Tests / outils utilis√©s": [
                "M-ABC-2",
                "BHK (√©chelle d'√©valuation de l'√©criture)",
                "Observation clinique libre",
            ],
            "Analyse & synth√®se": "Profil compatible avec un trouble de la coordination",
            "Conclusion & recommandations": "R√©√©ducation psychomotrice recommand√©e",
            "Projet th√©rapeutique": "S√©ances hebdomadaires, travail graphomoteur",
            "Modalit√©s & consentement": "Accord parental obtenu",
        },
    }

    output_file = Path("exemple_notes.json")
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(example_notes, f, indent=2, ensure_ascii=False)

    console.print(f"‚úÖ Fichier d'exemple cr√©√©: {output_file}")
    console.print("Utilisez: pbg generate exemple_notes.json")


def main():
    """Point d'entr√©e principal"""
    try:
        app()
    except KeyboardInterrupt:
        console.print("\nüëã Au revoir!")
        sys.exit(0)
    except Exception as e:
        console.print(f"\nüí• Erreur inattendue: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
